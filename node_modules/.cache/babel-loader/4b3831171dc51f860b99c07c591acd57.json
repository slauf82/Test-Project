{"ast":null,"code":"import React, { useEffect, useState, useReducer, useRef } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar initialState = {\n  isFocus: false,\n  focusIndex: -1\n};\n\nvar focusReducer = function focusReducer(state, action) {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return _extends({}, state, {\n        focusIndex: action.focusIndex\n      });\n\n    case 'toggleFocus':\n      return _extends({}, state, {\n        isFocus: action.isFocus\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar styles = {\n  \"comboBox\": \"_3tcyg\",\n  \"comboBoxInput\": \"_3LDgJ\",\n  \"comboBoxPopover\": \"_WbEAz\",\n  \"comboBoxList\": \"_r3jpc\",\n  \"comboBoxOption\": \"_2iQTD\",\n  \"rightElement\": \"_1GXAI\",\n  \"leftElement\": \"_2e4AG\"\n};\n\nvar useScroll = function useScroll(focusedIndex, scrollableContainer, listContainer) {\n  useEffect(function () {\n    if (listContainer.current && scrollableContainer.current && focusedIndex >= 0) {\n      if (focusedIndex === 0) scrollableContainer.current.scrollTo({\n        top: 0\n      });\n      var children = listContainer.current.childNodes;\n      var focusedChild = children && children.length ? children[focusedIndex] : null;\n\n      if (focusedChild && focusedChild.getBoundingClientRect) {\n        var _focusedChild$getBoun = focusedChild.getBoundingClientRect(),\n            optionHeight = _focusedChild$getBoun.height;\n\n        var _scrollableContainer$ = scrollableContainer.current.getBoundingClientRect(),\n            listHeight = _scrollableContainer$.height;\n\n        var scrollTop = scrollableContainer.current.scrollTop;\n        var isAbove = focusedChild.offsetTop <= scrollTop;\n        var isInView = focusedChild.offsetTop >= scrollTop && focusedChild.offsetTop + optionHeight <= scrollTop + listHeight;\n\n        if (!isInView) {\n          if (isAbove) {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop\n            });\n          } else {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop - listHeight + optionHeight\n            });\n          }\n        }\n      }\n    }\n  }, [focusedIndex, listContainer, scrollableContainer]);\n};\n\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar ENTER_KEY = 13;\nvar ESCAPE_KEY = 27;\n\nvar ComboBox = function ComboBox(_ref) {\n  var comboBoxOptions = _ref.options,\n      onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      placeholder = _ref.placeholder,\n      onSelect = _ref.onSelect,\n      onOptionsChange = _ref.onOptionsChange,\n      optionsListMaxHeight = _ref.optionsListMaxHeight,\n      renderOptions = _ref.renderOptions,\n      style = _ref.style,\n      inputClassName = _ref.inputClassName,\n      className = _ref.className,\n      listClassName = _ref.listClassName,\n      optionsClassName = _ref.optionsClassName,\n      popoverClassName = _ref.popoverClassName,\n      highlightColor = _ref.highlightColor,\n      selectedOptionColor = _ref.selectedOptionColor,\n      enableAutocomplete = _ref.enableAutocomplete,\n      inputStyles = _ref.inputStyles,\n      name = _ref.name,\n      onBlur = _ref.onBlur,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      renderRightElement = _ref.renderRightElement,\n      renderLeftElement = _ref.renderLeftElement;\n  var optionMaxHeight = optionsListMaxHeight || 200;\n  var suggestionListPositionStyles = {};\n\n  var _useState = useState(comboBoxOptions),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var _useState2 = useState(defaultValue || ''),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useReducer = useReducer(focusReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var isFocus = state.isFocus,\n      focusIndex = state.focusIndex;\n\n  var _useState3 = useState(false),\n      isMouseInsideOptions = _useState3[0],\n      setIsMouseInsideOptions = _useState3[1];\n\n  var _useState4 = useState(false),\n      IsOptionsPositionedTop = _useState4[0],\n      setIsOptionsPositionedTop = _useState4[1];\n\n  var _useState5 = useState(-1),\n      selectedOptionIndex = _useState5[0],\n      setSelectedOptionIndex = _useState5[1];\n\n  var dropdownRef = useRef(null);\n  var optionsListRef = useRef(null);\n  useEffect(function () {\n    setOptions(comboBoxOptions);\n  }, [comboBoxOptions]);\n  useEffect(function () {\n    if (!isFocus) setInputValue(defaultValue || '');\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    });\n    setSelectedOptionIndex(defaultValue ? options.indexOf(defaultValue.toString()) : -1);\n  }, [defaultValue]);\n  useScroll(focusIndex, dropdownRef, optionsListRef);\n  useEffect(function () {\n    var _optionsContainerElem, _optionsContainerElem2;\n\n    var optionsContainerElement = dropdownRef.current;\n    var offsetBottom = window.innerHeight - (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem = optionsContainerElement.offsetParent) === null || _optionsContainerElem === void 0 ? void 0 : _optionsContainerElem.getBoundingClientRect().top);\n\n    if (optionMaxHeight > offsetBottom && (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem2 = optionsContainerElement.offsetParent) === null || _optionsContainerElem2 === void 0 ? void 0 : _optionsContainerElem2.getBoundingClientRect().top) > offsetBottom) {\n      setIsOptionsPositionedTop(true);\n    } else {\n      setIsOptionsPositionedTop(false);\n    }\n  }, [isFocus]);\n  if (IsOptionsPositionedTop) suggestionListPositionStyles = {\n    bottom: '100%',\n    marginBottom: '5px'\n  };else suggestionListPositionStyles = {\n    top: '100%',\n    marginTop: '5px'\n  };\n\n  var blurHandler = function blurHandler(event) {\n    if (!isMouseInsideOptions) dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    if (onBlur) onBlur(event);\n  };\n\n  var updateValue = function updateValue(index) {\n    if (index === void 0) {\n      index = focusIndex;\n    }\n\n    if (index !== -1) {\n      setInputValue(options[index]);\n      if (onOptionsChange) onOptionsChange(options[index]);\n    }\n  };\n\n  var resetFocusIndex = function resetFocusIndex() {\n    comboBoxOptions.forEach(function (option, index) {\n      if (option === options[focusIndex]) dispatch({\n        type: 'setFocusIndex',\n        focusIndex: index\n      });\n    });\n  };\n\n  var selectSuggestionHandler = function selectSuggestionHandler() {\n    updateValue();\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    setSelectedOptionIndex(focusIndex);\n    resetFocusIndex();\n    setOptions(comboBoxOptions);\n    if (onSelect) onSelect(options[focusIndex]);\n  };\n\n  var keyHandler = function keyHandler(event) {\n    var optionsContainerElement = dropdownRef.current;\n    var newFocusIndex = focusIndex;\n\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n          } else {\n            if (focusIndex >= options.length - 1) {\n              newFocusIndex = 0;\n              optionsContainerElement.scrollTop = 0;\n            } else {\n              newFocusIndex = focusIndex + 1;\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          dropdownRef.current = optionsContainerElement;\n          break;\n        }\n\n      case UP_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n          } else {\n            if (focusIndex <= 0) {\n              newFocusIndex = options.length - 1;\n              if (optionsContainerElement) optionsContainerElement.scrollTop = optionsContainerElement.scrollHeight;\n            } else {\n              newFocusIndex = focusIndex - 1;\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          dropdownRef.current = optionsContainerElement;\n          break;\n        }\n\n      case ENTER_KEY:\n        {\n          event.preventDefault();\n          if (focusIndex > -1 && focusIndex < options.length) selectSuggestionHandler();\n          break;\n        }\n\n      case ESCAPE_KEY:\n        {\n          event.target.blur();\n          dispatch({\n            type: 'toggleFocus',\n            isFocus: false\n          });\n          break;\n        }\n    }\n  };\n\n  var filterSuggestion = function filterSuggestion(filterText) {\n    if (filterText.length === 0) setOptions(comboBoxOptions);else {\n      var filteredSuggestion = comboBoxOptions.filter(function (option) {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\n      });\n      setOptions(filteredSuggestion);\n    }\n  };\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    if (onChange) onChange(event);\n    setInputValue(event.target.value);\n    if (enableAutocomplete) filterSuggestion(event.target.value);\n  };\n\n  var inputClickHandler = function inputClickHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    });\n  };\n\n  var focusHandler = function focusHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n  };\n\n  var mouseEnterHandler = function mouseEnterHandler(index) {\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: index\n    });\n    if (onOptionsChange) onOptionsChange(options[index]);\n  };\n\n  var backgroundColorSelector = function backgroundColorSelector(optionIndex) {\n    if (optionIndex === focusIndex && optionIndex === selectedOptionIndex) return {\n      backgroundColor: selectedOptionColor || '#63b3ed'\n    };else if (optionIndex === focusIndex) {\n      return {\n        backgroundColor: highlightColor || '#bee3f8'\n      };\n    } else if (optionIndex === selectedOptionIndex) {\n      return {\n        backgroundColor: selectedOptionColor || '#63b3ed'\n      };\n    } else return {};\n  };\n\n  return React.createElement(\"div\", {\n    className: className ? styles.comboBox + \" \" + className : styles.comboBox,\n    style: style\n  }, renderLeftElement && React.createElement(\"div\", {\n    className: styles.leftElement\n  }, renderLeftElement()), React.createElement(\"input\", {\n    onFocus: focusHandler,\n    onChange: inputChangeHandler,\n    placeholder: placeholder || '',\n    onKeyDown: keyHandler,\n    value: inputValue,\n    className: inputClassName ? styles.comboBoxInput + \" \" + inputClassName : styles.comboBoxInput,\n    onBlur: blurHandler,\n    name: name,\n    style: _extends({}, inputStyles, {\n      cursor: editable ? 'text' : 'pointer',\n      paddingLeft: renderLeftElement ? 30 : 10\n    }),\n    readOnly: !editable,\n    onClick: inputClickHandler\n  }), renderRightElement && React.createElement(\"div\", {\n    className: styles.rightElement\n  }, renderRightElement()), React.createElement(\"div\", {\n    className: popoverClassName ? styles.comboBoxPopover + \" \" + popoverClassName : styles.comboBoxPopover,\n    style: _extends({\n      opacity: isFocus ? 1 : 0,\n      visibility: isFocus ? 'visible' : 'hidden',\n      maxHeight: isFocus ? optionMaxHeight : 0\n    }, suggestionListPositionStyles),\n    ref: dropdownRef,\n    onMouseEnter: function onMouseEnter() {\n      return setIsMouseInsideOptions(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setIsMouseInsideOptions(false);\n    }\n  }, React.createElement(\"ul\", {\n    className: listClassName ? styles.comboBoxList + \" \" + listClassName : styles.comboBoxList,\n    ref: optionsListRef\n  }, options.map(function (option, index) {\n    return React.createElement(\"li\", {\n      className: optionsClassName ? styles.comboBoxOption + \" \" + optionsClassName : styles.comboBoxOption,\n      key: option,\n      style: _extends({}, backgroundColorSelector(index)),\n      onClick: function onClick() {\n        return selectSuggestionHandler();\n      },\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      onMouseEnter: function onMouseEnter() {\n        return mouseEnterHandler(index);\n      }\n    }, renderOptions ? renderOptions(option) : option);\n  }))));\n};\n\nexport default ComboBox;","map":{"version":3,"mappings":"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","names":["initialState","isFocus","focusIndex","focusReducer","state","action","type","useScroll","focusedIndex","scrollableContainer","listContainer","useEffect","current","scrollTo","top","children","childNodes","focusedChild","length","getBoundingClientRect","optionHeight","height","listHeight","scrollTop","isAbove","offsetTop","isInView","UP_ARROW","DOWN_ARROW","ENTER_KEY","ESCAPE_KEY","ComboBox","comboBoxOptions","options","onChange","defaultValue","placeholder","onSelect","onOptionsChange","optionsListMaxHeight","renderOptions","style","inputClassName","className","listClassName","optionsClassName","popoverClassName","highlightColor","selectedOptionColor","enableAutocomplete","inputStyles","name","onBlur","editable","_ref$editable","renderRightElement","renderLeftElement","optionMaxHeight","suggestionListPositionStyles","useState","setOptions","inputValue","setInputValue","useReducer","dispatch","isMouseInsideOptions","setIsMouseInsideOptions","IsOptionsPositionedTop","setIsOptionsPositionedTop","selectedOptionIndex","setSelectedOptionIndex","dropdownRef","useRef","optionsListRef","indexOf","toString","optionsContainerElement","offsetBottom","window","innerHeight","offsetParent","_optionsContainerElem","bottom","marginBottom","marginTop","blurHandler","event","updateValue","index","resetFocusIndex","forEach","option","selectSuggestionHandler","keyHandler","newFocusIndex","keyCode","preventDefault","scrollHeight","target","blur","filterSuggestion","filterText","filteredSuggestion","filter","toLowerCase","inputChangeHandler","value","inputClickHandler","focusHandler","mouseEnterHandler","backgroundColorSelector","optionIndex","backgroundColor","React","styles","comboBox","leftElement","onFocus","onKeyDown","comboBoxInput","cursor","paddingLeft","readOnly","onClick","rightElement","comboBoxPopover","opacity","visibility","maxHeight","ref","onMouseEnter","onMouseLeave","comboBoxList","map","comboBoxOption","key","onMouseDown","e"],"sources":["C:\\Users\\Sebastian Lauf\\eclipse-workspace\\test3\\node_modules\\react-responsive-combo-box\\src\\reducer\\focusReducer.ts","C:\\Users\\Sebastian Lauf\\eclipse-workspace\\test3\\node_modules\\react-responsive-combo-box\\src\\hooks\\useScroll.ts","C:\\Users\\Sebastian Lauf\\eclipse-workspace\\test3\\node_modules\\react-responsive-combo-box\\src\\index.tsx"],"sourcesContent":["type FocusStateType = {\n  isFocus: boolean\n  focusIndex: number\n}\n\ntype Action =\n  | { type: 'setFocusIndex'; focusIndex: number }\n  | { type: 'toggleFocus'; isFocus: boolean }\n\nconst initialState: FocusStateType = {\n  isFocus: false,\n  focusIndex: -1\n}\n\nconst focusReducer = (state: FocusStateType, action: Action) => {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return { ...state, focusIndex: action.focusIndex }\n    case 'toggleFocus':\n      return { ...state, isFocus: action.isFocus }\n    default:\n      return state\n  }\n}\n\nexport { initialState, focusReducer }\n","// eslint-disable-next-line no-unused-vars\nimport { useEffect, RefObject } from 'react'\n\nconst useScroll = (\n  focusedIndex: number,\n  scrollableContainer: RefObject<HTMLDivElement>,\n  listContainer: RefObject<HTMLUListElement>\n) => {\n  useEffect(() => {\n    if (\n      listContainer.current &&\n      scrollableContainer.current &&\n      focusedIndex >= 0\n    ) {\n      if (focusedIndex === 0)\n        scrollableContainer.current.scrollTo({\n          top: 0\n        })\n      const children = listContainer.current.childNodes\n      const focusedChild =\n        children && children.length\n          ? (children[focusedIndex] as HTMLDivElement)\n          : null\n\n      if (focusedChild && focusedChild.getBoundingClientRect) {\n        const { height: optionHeight } = focusedChild.getBoundingClientRect()\n        const {\n          height: listHeight\n        } = scrollableContainer.current.getBoundingClientRect()\n        const scrollTop = scrollableContainer.current.scrollTop\n        const isAbove = focusedChild.offsetTop <= scrollTop\n        const isInView =\n          focusedChild.offsetTop >= scrollTop &&\n          focusedChild.offsetTop + optionHeight <= scrollTop + listHeight\n\n        if (!isInView) {\n          if (isAbove) {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop\n            })\n          } else {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop - listHeight + optionHeight\n            })\n          }\n        }\n      }\n    }\n  }, [focusedIndex, listContainer, scrollableContainer])\n}\n\nexport default useScroll\n","/* eslint-disable no-unused-vars */\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  useReducer,\n  ReactElement\n} from 'react'\n\nimport { initialState, focusReducer } from './reducer/focusReducer'\nimport styles from './index.css'\nimport useScroll from './hooks/useScroll'\n\ntype ComboBoxProps = {\n  options: string[]\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  defaultValue?: string\n  placeholder?: string\n  onSelect?: (option: string) => void\n  onOptionsChange?: (option: string) => void\n  optionsListMaxHeight?: number\n  renderOptions?: (option: string) => React.ReactNode\n  style?: React.CSSProperties\n  optionsClassName?: string\n  inputClassName?: string\n  className?: string\n  listClassName?: string\n  popoverClassName?: string\n  highlightColor?: string\n  selectedOptionColor?: string\n  enableAutocomplete?: boolean\n  inputStyles?: React.CSSProperties\n  name?: string\n  onBlur?: (event?: React.ChangeEvent<HTMLInputElement>) => void\n  editable?: boolean\n  renderRightElement?: () => ReactElement\n  renderLeftElement?: () => ReactElement\n}\n\nconst UP_ARROW = 38\nconst DOWN_ARROW = 40\nconst ENTER_KEY = 13\nconst ESCAPE_KEY = 27\n\nconst ComboBox: React.FC<ComboBoxProps> = ({\n  options: comboBoxOptions,\n  onChange,\n  defaultValue,\n  placeholder,\n  onSelect,\n  onOptionsChange,\n  optionsListMaxHeight,\n  renderOptions,\n  style,\n  inputClassName,\n  className,\n  listClassName,\n  optionsClassName,\n  popoverClassName,\n  highlightColor,\n  selectedOptionColor,\n  enableAutocomplete,\n  inputStyles,\n  name,\n  onBlur,\n  editable = true,\n  renderRightElement,\n  renderLeftElement\n}) => {\n  const optionMaxHeight = optionsListMaxHeight || 200\n  let suggestionListPositionStyles: React.CSSProperties = {}\n\n  // Function that will check whether the defaultIndex falls inside the length of the options\n  // or else it will return -1\n\n  const [options, setOptions] = useState<string[]>(comboBoxOptions)\n  const [inputValue, setInputValue] = useState(defaultValue || '')\n  const [state, dispatch] = useReducer(focusReducer, initialState)\n  const { isFocus, focusIndex } = state\n  const [isMouseInsideOptions, setIsMouseInsideOptions] = useState(false) // This is used to determine whether the mouse cursor is inside or outside options container\n  const [IsOptionsPositionedTop, setIsOptionsPositionedTop] = useState(false)\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(-1)\n\n  const dropdownRef = useRef<HTMLDivElement | null>(null)\n  const optionsListRef = useRef<HTMLUListElement>(null)\n\n  useEffect(() => {\n    setOptions(comboBoxOptions)\n  }, [comboBoxOptions])\n\n  useEffect(() => {\n    if (!isFocus) setInputValue(defaultValue || '')\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    })\n    setSelectedOptionIndex(\n      defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    )\n  }, [defaultValue])\n\n  useScroll(focusIndex, dropdownRef, optionsListRef)\n\n  useEffect(() => {\n    // Position the options container top or bottom based on the space available\n    const optionsContainerElement: any = dropdownRef.current\n\n    const offsetBottom =\n      window.innerHeight -\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top\n\n    if (\n      optionMaxHeight > offsetBottom &&\n      optionsContainerElement?.offsetParent?.getBoundingClientRect().top >\n        offsetBottom\n    ) {\n      setIsOptionsPositionedTop(true)\n    } else {\n      setIsOptionsPositionedTop(false)\n    }\n  }, [isFocus])\n\n  if (IsOptionsPositionedTop)\n    suggestionListPositionStyles = {\n      bottom: '100%',\n      marginBottom: '5px'\n    }\n  else\n    suggestionListPositionStyles = {\n      top: '100%',\n      marginTop: '5px'\n    }\n\n  const blurHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (!isMouseInsideOptions) dispatch({ type: 'toggleFocus', isFocus: false })\n    if (onBlur) onBlur(event)\n  }\n\n  const updateValue = (index: number = focusIndex) => {\n    if (index !== -1) {\n      setInputValue(options[index])\n      if (onOptionsChange) onOptionsChange(options[index])\n    }\n  }\n\n  // While searching, the options are filtered and the index also changed.\n  // So the focus index is set to original based on all the options.\n  const resetFocusIndex = () => {\n    comboBoxOptions.forEach((option: string, index: number) => {\n      if (option === options[focusIndex])\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: index\n        })\n    })\n  }\n\n  const selectSuggestionHandler = () => {\n    updateValue()\n    dispatch({ type: 'toggleFocus', isFocus: false })\n    setSelectedOptionIndex(focusIndex)\n    resetFocusIndex()\n    setOptions(comboBoxOptions)\n\n    if (onSelect) onSelect(options[focusIndex])\n  }\n\n  const keyHandler = (event: any) => {\n    const optionsContainerElement: any = dropdownRef.current\n    let newFocusIndex = focusIndex\n\n    switch (event.keyCode) {\n      case DOWN_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        // Also set the scroll top\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n        } else {\n          // If the focus reaches the end of the options in the list, set the focus to 0\n\n          if (focusIndex >= options.length - 1) {\n            newFocusIndex = 0\n            optionsContainerElement.scrollTop = 0\n          }\n          // Change the scroll position based on the selected option position\n          else {\n            newFocusIndex = focusIndex + 1\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        dropdownRef.current = optionsContainerElement\n        break\n      }\n      case UP_ARROW: {\n        event.preventDefault()\n\n        // set the focus to true if the options list was not opened.\n        if (!isFocus) {\n          dispatch({ type: 'toggleFocus', isFocus: true })\n        } else {\n          // If the focus falls beyond the start of the options in the list, set the focus to height of the suggestion-list\n          if (focusIndex <= 0) {\n            newFocusIndex = options.length - 1\n\n            if (optionsContainerElement)\n              optionsContainerElement.scrollTop =\n                optionsContainerElement.scrollHeight\n          } else {\n            newFocusIndex = focusIndex - 1\n          }\n        }\n        dispatch({\n          type: 'setFocusIndex',\n          focusIndex: newFocusIndex\n        })\n\n        if (onOptionsChange) onOptionsChange(options[newFocusIndex])\n        dropdownRef.current = optionsContainerElement\n        break\n      }\n      case ENTER_KEY: {\n        event.preventDefault()\n        if (focusIndex > -1 && focusIndex < options.length)\n          selectSuggestionHandler()\n\n        break\n      }\n      case ESCAPE_KEY: {\n        event.target.blur()\n        dispatch({ type: 'toggleFocus', isFocus: false })\n        break\n      }\n    }\n  }\n\n  const filterSuggestion = (filterText: string) => {\n    if (filterText.length === 0) setOptions(comboBoxOptions)\n    else {\n      const filteredSuggestion = comboBoxOptions.filter((option) => {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1\n      })\n      setOptions(filteredSuggestion)\n    }\n  }\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(event)\n    setInputValue(event.target.value)\n    if (enableAutocomplete) filterSuggestion(event.target.value)\n  }\n\n  const inputClickHandler = () => {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    })\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    })\n  }\n\n  const focusHandler = () => {\n    dispatch({ type: 'toggleFocus', isFocus: true })\n  }\n\n  const mouseEnterHandler = (index: number) => {\n    dispatch({ type: 'setFocusIndex', focusIndex: index })\n    if (onOptionsChange) onOptionsChange(options[index])\n  }\n\n  const backgroundColorSelector = (optionIndex: number) => {\n    if (optionIndex === focusIndex && optionIndex === selectedOptionIndex)\n      return { backgroundColor: selectedOptionColor || '#63b3ed' }\n    else if (optionIndex === focusIndex) {\n      return { backgroundColor: highlightColor || '#bee3f8' }\n    } else if (optionIndex === selectedOptionIndex) {\n      return { backgroundColor: selectedOptionColor || '#63b3ed' }\n    } else return {}\n  }\n\n  return (\n    <div\n      className={\n        className ? `${styles.comboBox} ${className}` : styles.comboBox\n      }\n      style={style}\n    >\n      {renderLeftElement && (\n        <div className={styles.leftElement}>{renderLeftElement()}</div>\n      )}\n      <input\n        onFocus={focusHandler}\n        onChange={inputChangeHandler}\n        placeholder={placeholder || ''}\n        onKeyDown={keyHandler}\n        value={inputValue}\n        className={\n          inputClassName\n            ? `${styles.comboBoxInput} ${inputClassName}`\n            : styles.comboBoxInput\n        }\n        onBlur={blurHandler}\n        name={name}\n        style={{\n          ...inputStyles,\n          cursor: editable ? 'text' : 'pointer',\n          paddingLeft: renderLeftElement ? 30 : 10\n        }}\n        readOnly={!editable}\n        onClick={inputClickHandler}\n      />\n      {renderRightElement && (\n        <div className={styles.rightElement}>{renderRightElement()}</div>\n      )}\n      <div\n        className={\n          popoverClassName\n            ? `${styles.comboBoxPopover} ${popoverClassName}`\n            : styles.comboBoxPopover\n        }\n        style={{\n          opacity: isFocus ? 1 : 0,\n          visibility: isFocus ? 'visible' : 'hidden',\n          maxHeight: isFocus ? optionMaxHeight : 0,\n          ...suggestionListPositionStyles\n        }}\n        ref={dropdownRef}\n        onMouseEnter={() => setIsMouseInsideOptions(true)}\n        onMouseLeave={() => setIsMouseInsideOptions(false)}\n      >\n        <ul\n          className={\n            listClassName\n              ? `${styles.comboBoxList} ${listClassName}`\n              : styles.comboBoxList\n          }\n          ref={optionsListRef}\n        >\n          {options.map((option, index) => {\n            return (\n              <li\n                className={\n                  optionsClassName\n                    ? `${styles.comboBoxOption} ${optionsClassName}`\n                    : styles.comboBoxOption\n                }\n                key={option}\n                style={{\n                  ...backgroundColorSelector(index)\n                }}\n                onClick={() => selectSuggestionHandler()}\n                onMouseDown={(e) => e.preventDefault()}\n                onMouseEnter={() => mouseEnterHandler(index)}\n              >\n                {renderOptions ? renderOptions(option) : option}\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default ComboBox\n"]},"metadata":{},"sourceType":"module"}