{"ast":null,"code":"Object.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nvar PropTypes__namespace = /*#__PURE__*/_interopNamespace(PropTypes);\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nvar ProgressBar = function ProgressBar(_a) {\n  var bgColor = _a.bgColor,\n      completed = _a.completed,\n      baseBgColor = _a.baseBgColor,\n      height = _a.height,\n      width = _a.width,\n      margin = _a.margin,\n      padding = _a.padding,\n      borderRadius = _a.borderRadius,\n      labelAlignment = _a.labelAlignment,\n      labelColor = _a.labelColor,\n      labelSize = _a.labelSize,\n      isLabelVisible = _a.isLabelVisible,\n      customLabelStyles = _a.customLabelStyles,\n      transitionDuration = _a.transitionDuration,\n      transitionTimingFunction = _a.transitionTimingFunction,\n      className = _a.className,\n      dir = _a.dir,\n      ariaValuemin = _a.ariaValuemin,\n      ariaValuemax = _a.ariaValuemax,\n      ariaValuetext = _a.ariaValuetext,\n      maxCompleted = _a.maxCompleted,\n      customLabel = _a.customLabel,\n      animateOnRender = _a.animateOnRender,\n      barContainerClassName = _a.barContainerClassName,\n      completedClassName = _a.completedClassName,\n      labelClassName = _a.labelClassName,\n      _b = _a.initCompletedOnAnimation,\n      initCompletedOnAnimation = _b === void 0 ? 0 : _b;\n\n  var getAlignment = function getAlignment(alignmentOption) {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  var alignment = getAlignment(labelAlignment);\n  var initCompletedOnAnimationStr = typeof initCompletedOnAnimation === \"number\" ? \"\".concat(initCompletedOnAnimation, \"%\") : initCompletedOnAnimation;\n\n  var getFillerWidth = function getFillerWidth(maxCompletedValue, completedValue) {\n    if (maxCompletedValue) {\n      var ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : \"\".concat(ratio * 100, \"%\");\n    }\n\n    return initCompletedOnAnimationStr;\n  };\n\n  var fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  var _c = React__namespace.useState(initCompletedOnAnimationStr),\n      initWidth = _c[0],\n      setInitWidth = _c[1];\n\n  var containerStyles = {\n    height: height,\n    background: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin\n  };\n  var fillerStyles = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    background: bgColor,\n    transition: \"width \".concat(transitionDuration || \"1s\", \" \").concat(transitionTimingFunction || \"ease-in-out\"),\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: labelAlignment !== \"outside\" && alignment ? alignment : \"normal\"\n  };\n\n  var labelStyles = _assign({\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\"\n  }, customLabelStyles);\n\n  var outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\"\n  };\n  var completedStr = typeof completed === \"number\" ? \"\".concat(completed, \"%\") : \"\".concat(completed);\n  var labelStr = customLabel ? customLabel : completedStr;\n  React__namespace.useEffect(function () {\n    if (animateOnRender) {\n      requestAnimationFrame(function () {\n        return setInitWidth(fillerWidth);\n      });\n    }\n  }, [fillerWidth, animateOnRender]);\n  return React__namespace.createElement(\"div\", {\n    style: className ? undefined : outsideStyles,\n    className: className,\n    dir: dir,\n    role: \"progressbar\",\n    \"aria-valuenow\": parseFloat(labelStr),\n    \"aria-valuemin\": ariaValuemin,\n    \"aria-valuemax\": ariaValuemax,\n    \"aria-valuetext\": \"\".concat(ariaValuetext === null ? labelStr : ariaValuetext)\n  }, React__namespace.createElement(\"div\", {\n    style: barContainerClassName ? undefined : containerStyles,\n    className: barContainerClassName\n  }, React__namespace.createElement(\"div\", {\n    style: completedClassName ? undefined : fillerStyles,\n    className: completedClassName\n  }, labelAlignment !== \"outside\" && React__namespace.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr))), labelAlignment === \"outside\" && React__namespace.createElement(\"span\", {\n    style: labelClassName ? undefined : labelStyles,\n    className: labelClassName\n  }, labelStr));\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes__namespace.oneOfType([PropTypes__namespace.string, PropTypes__namespace.number]).isRequired,\n  bgColor: PropTypes__namespace.string,\n  baseBgColor: PropTypes__namespace.string,\n  height: PropTypes__namespace.string,\n  width: PropTypes__namespace.string,\n  borderRadius: PropTypes__namespace.string,\n  margin: PropTypes__namespace.string,\n  padding: PropTypes__namespace.string,\n  labelAlignment: PropTypes__namespace.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes__namespace.string,\n  labelSize: PropTypes__namespace.string,\n  isLabelVisible: PropTypes__namespace.bool,\n  className: PropTypes__namespace.string,\n  dir: PropTypes__namespace.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes__namespace.number,\n  customLabel: PropTypes__namespace.string,\n  animateOnRender: PropTypes__namespace.bool,\n  barContainerClassName: PropTypes__namespace.string,\n  completedClassName: PropTypes__namespace.string,\n  labelClassName: PropTypes__namespace.string,\n  initCompletedOnAnimation: PropTypes__namespace.oneOfType([PropTypes__namespace.string, PropTypes__namespace.number])\n};\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false,\n  initCompletedOnAnimation: 0\n};\nexports[\"default\"] = ProgressBar;","map":null,"metadata":{},"sourceType":"script"}