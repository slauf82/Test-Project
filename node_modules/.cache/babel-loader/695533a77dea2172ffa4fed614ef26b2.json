{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar ReactDOM = require('react-dom');\n\nvar isUndefined = require('lodash/isUndefined');\n\nmodule.exports = React.createClass({\n  displayName: 'popover-follow',\n  propTypes: {\n    position: React.PropTypes.number,\n    value: React.PropTypes.number,\n    trackWidth: React.PropTypes.number,\n    handleWidth: React.PropTypes.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      position: 0,\n      value: 0,\n      trackWidth: 0\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      arrowPosition: undefined,\n      bubblePosition: undefined,\n      popoverWidth: 0,\n      arrowWidth: 0\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this.updatePopoverAndArrowWidth();\n    window.addEventListener('resize', function () {\n      _this.updatePopoverAndArrowWidth();\n    });\n  },\n  setPosition: function setPosition() {\n    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];\n    var trackWidth = this.props.trackWidth;\n\n    if (this.props.handleWidth) {\n      trackWidth += this.props.handleWidth;\n    }\n\n    var spaceArrowShouldMove = this.state.popoverWidth / 2 - this.state.arrowWidth;\n\n    if (props.position >= spaceArrowShouldMove && props.position <= this.props.trackWidth - spaceArrowShouldMove) {\n      // Middle of the slider where the popover is completely inside the width of the slider\n      this.setState({\n        bubblePosition: props.position,\n        arrowPosition: spaceArrowShouldMove\n      });\n    } else if (props.position < spaceArrowShouldMove) {\n      // Left section of the slider\n      this.setState({\n        arrowPosition: props.position,\n        bubblePosition: spaceArrowShouldMove\n      });\n    } else if (props.position > this.props.trackWidth - spaceArrowShouldMove) {\n      // Right section of the slider\n      this.setState({\n        arrowPosition: props.position - 2 * spaceArrowShouldMove,\n        bubblePosition: trackWidth - spaceArrowShouldMove - this.props.handleWidth\n      });\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    this.setPosition(nextProps);\n  },\n  updatePopoverAndArrowWidth: function updatePopoverAndArrowWidth() {\n    var popover = ReactDOM.findDOMNode(this.refs.popover);\n\n    if (!popover) {\n      return;\n    }\n\n    var popoverWidth = popover.offsetWidth;\n    var arrowWidth = ReactDOM.findDOMNode(this.refs.popover).getElementsByClassName('arrow').length > 0 ? ReactDOM.findDOMNode(this.refs.popover).getElementsByClassName('arrow')[0].offsetWidth : 12;\n    this.setState({\n      popoverWidth: popoverWidth,\n      arrowWidth: arrowWidth\n    }, this.setPosition);\n  },\n  render: function render() {\n    var styles = {};\n\n    if (isUndefined(this.state.arrowPosition) || isUndefined(this.state.bubblePosition)) {\n      styles = {\n        visibility: 'hidden'\n      };\n    }\n\n    var popoverStyle = {\n      display: 'block',\n      left: this.state.bubblePosition\n    };\n    var arrowStyle = {\n      left: this.state.arrowPosition\n    };\n    return React.createElement('div', {\n      style: styles,\n      ref: 'container',\n      className: 'popover-container'\n    }, React.createElement('div', {\n      role: 'tooltip',\n      ref: 'popover',\n      className: 'popover',\n      style: popoverStyle\n    }, React.createElement('div', {\n      className: 'popover__arrow',\n      style: arrowStyle\n    }), React.createElement('div', {\n      className: 'popover__content'\n    }, this.props.value)));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}