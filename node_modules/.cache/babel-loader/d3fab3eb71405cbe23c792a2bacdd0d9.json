{"ast":null,"code":"import React, { useEffect, useState, useReducer, useRef } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar initialState = {\n  isFocus: false,\n  focusIndex: -1\n};\n\nvar focusReducer = function focusReducer(state, action) {\n  switch (action.type) {\n    case 'setFocusIndex':\n      return _extends({}, state, {\n        focusIndex: action.focusIndex\n      });\n\n    case 'toggleFocus':\n      return _extends({}, state, {\n        isFocus: action.isFocus\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar styles = {\n  \"comboBox\": \"_3tcyg\",\n  \"comboBoxInput\": \"_3LDgJ\",\n  \"comboBoxPopover\": \"_WbEAz\",\n  \"comboBoxList\": \"_r3jpc\",\n  \"comboBoxOption\": \"_2iQTD\",\n  \"rightElement\": \"_1GXAI\",\n  \"leftElement\": \"_2e4AG\"\n};\n\nvar useScroll = function useScroll(focusedIndex, scrollableContainer, listContainer) {\n  useEffect(function () {\n    if (listContainer.current && scrollableContainer.current && focusedIndex >= 0) {\n      if (focusedIndex === 0) scrollableContainer.current.scrollTo({\n        top: 0\n      });\n      var children = listContainer.current.childNodes;\n      var focusedChild = children && children.length ? children[focusedIndex] : null;\n\n      if (focusedChild && focusedChild.getBoundingClientRect) {\n        var _focusedChild$getBoun = focusedChild.getBoundingClientRect(),\n            optionHeight = _focusedChild$getBoun.height;\n\n        var _scrollableContainer$ = scrollableContainer.current.getBoundingClientRect(),\n            listHeight = _scrollableContainer$.height;\n\n        var scrollTop = scrollableContainer.current.scrollTop;\n        var isAbove = focusedChild.offsetTop <= scrollTop;\n        var isInView = focusedChild.offsetTop >= scrollTop && focusedChild.offsetTop + optionHeight <= scrollTop + listHeight;\n\n        if (!isInView) {\n          if (isAbove) {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop\n            });\n          } else {\n            scrollableContainer.current.scrollTo({\n              top: focusedChild.offsetTop - listHeight + optionHeight\n            });\n          }\n        }\n      }\n    }\n  }, [focusedIndex, listContainer, scrollableContainer]);\n};\n\nvar UP_ARROW = 38;\nvar DOWN_ARROW = 40;\nvar ENTER_KEY = 13;\nvar ESCAPE_KEY = 27;\n\nvar ComboBox = function ComboBox(_ref) {\n  var comboBoxOptions = _ref.options,\n      onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      placeholder = _ref.placeholder,\n      onSelect = _ref.onSelect,\n      onOptionsChange = _ref.onOptionsChange,\n      optionsListMaxHeight = _ref.optionsListMaxHeight,\n      renderOptions = _ref.renderOptions,\n      style = _ref.style,\n      inputClassName = _ref.inputClassName,\n      className = _ref.className,\n      listClassName = _ref.listClassName,\n      optionsClassName = _ref.optionsClassName,\n      popoverClassName = _ref.popoverClassName,\n      highlightColor = _ref.highlightColor,\n      selectedOptionColor = _ref.selectedOptionColor,\n      enableAutocomplete = _ref.enableAutocomplete,\n      inputStyles = _ref.inputStyles,\n      name = _ref.name,\n      onBlur = _ref.onBlur,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      renderRightElement = _ref.renderRightElement,\n      renderLeftElement = _ref.renderLeftElement;\n  var optionMaxHeight = optionsListMaxHeight || 200;\n  var suggestionListPositionStyles = {};\n\n  var _useState = useState(comboBoxOptions),\n      options = _useState[0],\n      setOptions = _useState[1];\n\n  var _useState2 = useState(defaultValue || ''),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useReducer = useReducer(focusReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var isFocus = state.isFocus,\n      focusIndex = state.focusIndex;\n\n  var _useState3 = useState(false),\n      isMouseInsideOptions = _useState3[0],\n      setIsMouseInsideOptions = _useState3[1];\n\n  var _useState4 = useState(false),\n      IsOptionsPositionedTop = _useState4[0],\n      setIsOptionsPositionedTop = _useState4[1];\n\n  var _useState5 = useState(-1),\n      selectedOptionIndex = _useState5[0],\n      setSelectedOptionIndex = _useState5[1];\n\n  var dropdownRef = useRef(null);\n  var optionsListRef = useRef(null);\n  useEffect(function () {\n    setOptions(comboBoxOptions);\n  }, [comboBoxOptions]);\n  useEffect(function () {\n    if (!isFocus) setInputValue(defaultValue || '');\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: defaultValue ? options.indexOf(defaultValue.toString()) : -1\n    });\n    setSelectedOptionIndex(defaultValue ? options.indexOf(defaultValue.toString()) : -1);\n  }, [defaultValue]);\n  useScroll(focusIndex, dropdownRef, optionsListRef);\n  useEffect(function () {\n    var _optionsContainerElem, _optionsContainerElem2;\n\n    var optionsContainerElement = dropdownRef.current;\n    var offsetBottom = window.innerHeight - (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem = optionsContainerElement.offsetParent) === null || _optionsContainerElem === void 0 ? void 0 : _optionsContainerElem.getBoundingClientRect().top);\n\n    if (optionMaxHeight > offsetBottom && (optionsContainerElement === null || optionsContainerElement === void 0 ? void 0 : (_optionsContainerElem2 = optionsContainerElement.offsetParent) === null || _optionsContainerElem2 === void 0 ? void 0 : _optionsContainerElem2.getBoundingClientRect().top) > offsetBottom) {\n      setIsOptionsPositionedTop(true);\n    } else {\n      setIsOptionsPositionedTop(false);\n    }\n  }, [isFocus]);\n  if (IsOptionsPositionedTop) suggestionListPositionStyles = {\n    bottom: '100%',\n    marginBottom: '5px'\n  };else suggestionListPositionStyles = {\n    top: '100%',\n    marginTop: '5px'\n  };\n\n  var blurHandler = function blurHandler(event) {\n    if (!isMouseInsideOptions) dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    if (onBlur) onBlur(event);\n  };\n\n  var updateValue = function updateValue(index) {\n    if (index === void 0) {\n      index = focusIndex;\n    }\n\n    if (index !== -1) {\n      setInputValue(options[index]);\n      if (onOptionsChange) onOptionsChange(options[index]);\n    }\n  };\n\n  var resetFocusIndex = function resetFocusIndex() {\n    comboBoxOptions.forEach(function (option, index) {\n      if (option === options[focusIndex]) dispatch({\n        type: 'setFocusIndex',\n        focusIndex: index\n      });\n    });\n  };\n\n  var selectSuggestionHandler = function selectSuggestionHandler() {\n    updateValue();\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: false\n    });\n    setSelectedOptionIndex(focusIndex);\n    resetFocusIndex();\n    setOptions(comboBoxOptions);\n    if (onSelect) onSelect(options[focusIndex]);\n  };\n\n  var keyHandler = function keyHandler(event) {\n    var optionsContainerElement = dropdownRef.current;\n    var newFocusIndex = focusIndex;\n\n    switch (event.keyCode) {\n      case DOWN_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n          } else {\n            if (focusIndex >= options.length - 1) {\n              newFocusIndex = 0;\n              optionsContainerElement.scrollTop = 0;\n            } else {\n              newFocusIndex = focusIndex + 1;\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          dropdownRef.current = optionsContainerElement;\n          break;\n        }\n\n      case UP_ARROW:\n        {\n          event.preventDefault();\n\n          if (!isFocus) {\n            dispatch({\n              type: 'toggleFocus',\n              isFocus: true\n            });\n          } else {\n            if (focusIndex <= 0) {\n              newFocusIndex = options.length - 1;\n              if (optionsContainerElement) optionsContainerElement.scrollTop = optionsContainerElement.scrollHeight;\n            } else {\n              newFocusIndex = focusIndex - 1;\n            }\n          }\n\n          dispatch({\n            type: 'setFocusIndex',\n            focusIndex: newFocusIndex\n          });\n          if (onOptionsChange) onOptionsChange(options[newFocusIndex]);\n          dropdownRef.current = optionsContainerElement;\n          break;\n        }\n\n      case ENTER_KEY:\n        {\n          event.preventDefault();\n          if (focusIndex > -1 && focusIndex < options.length) selectSuggestionHandler();\n          break;\n        }\n\n      case ESCAPE_KEY:\n        {\n          event.target.blur();\n          dispatch({\n            type: 'toggleFocus',\n            isFocus: false\n          });\n          break;\n        }\n    }\n  };\n\n  var filterSuggestion = function filterSuggestion(filterText) {\n    if (filterText.length === 0) setOptions(comboBoxOptions);else {\n      var filteredSuggestion = comboBoxOptions.filter(function (option) {\n        return option.toLowerCase().indexOf(filterText.toLowerCase()) !== -1;\n      });\n      setOptions(filteredSuggestion);\n    }\n  };\n\n  var inputChangeHandler = function inputChangeHandler(event) {\n    if (onChange) onChange(event);\n    setInputValue(event.target.value);\n    if (enableAutocomplete) filterSuggestion(event.target.value);\n  };\n\n  var inputClickHandler = function inputClickHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: options.indexOf(inputValue.toString())\n    });\n  };\n\n  var focusHandler = function focusHandler() {\n    dispatch({\n      type: 'toggleFocus',\n      isFocus: true\n    });\n  };\n\n  var mouseEnterHandler = function mouseEnterHandler(index) {\n    dispatch({\n      type: 'setFocusIndex',\n      focusIndex: index\n    });\n    if (onOptionsChange) onOptionsChange(options[index]);\n  };\n\n  var backgroundColorSelector = function backgroundColorSelector(optionIndex) {\n    if (optionIndex === focusIndex && optionIndex === selectedOptionIndex) return {\n      backgroundColor: selectedOptionColor || '#63b3ed'\n    };else if (optionIndex === focusIndex) {\n      return {\n        backgroundColor: highlightColor || '#bee3f8'\n      };\n    } else if (optionIndex === selectedOptionIndex) {\n      return {\n        backgroundColor: selectedOptionColor || '#63b3ed'\n      };\n    } else return {};\n  };\n\n  return React.createElement(\"div\", {\n    className: className ? styles.comboBox + \" \" + className : styles.comboBox,\n    style: style\n  }, renderLeftElement && React.createElement(\"div\", {\n    className: styles.leftElement\n  }, renderLeftElement()), React.createElement(\"input\", {\n    onFocus: focusHandler,\n    onChange: inputChangeHandler,\n    placeholder: placeholder || '',\n    onKeyDown: keyHandler,\n    value: inputValue,\n    className: inputClassName ? styles.comboBoxInput + \" \" + inputClassName : styles.comboBoxInput,\n    onBlur: blurHandler,\n    name: name,\n    style: _extends({}, inputStyles, {\n      cursor: editable ? 'text' : 'pointer',\n      paddingLeft: renderLeftElement ? 30 : 10\n    }),\n    readOnly: !editable,\n    onClick: inputClickHandler\n  }), renderRightElement && React.createElement(\"div\", {\n    className: styles.rightElement\n  }, renderRightElement()), React.createElement(\"div\", {\n    className: popoverClassName ? styles.comboBoxPopover + \" \" + popoverClassName : styles.comboBoxPopover,\n    style: _extends({\n      opacity: isFocus ? 1 : 0,\n      visibility: isFocus ? 'visible' : 'hidden',\n      maxHeight: isFocus ? optionMaxHeight : 0\n    }, suggestionListPositionStyles),\n    ref: dropdownRef,\n    onMouseEnter: function onMouseEnter() {\n      return setIsMouseInsideOptions(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setIsMouseInsideOptions(false);\n    }\n  }, React.createElement(\"ul\", {\n    className: listClassName ? styles.comboBoxList + \" \" + listClassName : styles.comboBoxList,\n    ref: optionsListRef\n  }, options.map(function (option, index) {\n    return React.createElement(\"li\", {\n      className: optionsClassName ? styles.comboBoxOption + \" \" + optionsClassName : styles.comboBoxOption,\n      key: option,\n      style: _extends({}, backgroundColorSelector(index)),\n      onClick: function onClick() {\n        return selectSuggestionHandler();\n      },\n      onMouseDown: function onMouseDown(e) {\n        return e.preventDefault();\n      },\n      onMouseEnter: function onMouseEnter() {\n        return mouseEnterHandler(index);\n      }\n    }, renderOptions ? renderOptions(option) : option);\n  }))));\n};\n\nexport default ComboBox;","map":null,"metadata":{},"sourceType":"module"}